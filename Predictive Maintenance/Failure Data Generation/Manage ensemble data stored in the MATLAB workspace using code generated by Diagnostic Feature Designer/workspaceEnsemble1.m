%%% Manage ensemble data stored in the MATLAB workspace using code generated by Diagnostic Feature Designer

%% Create and Read a Workspace Ensemble
% Create a workspaceEnsemble object from an ensemble table and read its contents.
% Load the ensemble table dataTable and view the first three members.
load dfd_Tutorial dataTable
head(dataTable,3)

% The table contains 16 members, each of which contain timetables with vibration and tacho data along with a scalar fault code.
% Create a Workspace Ensemble
% Create a workspace ensemble wensemble from dataTable.
wensemble = workspaceEnsemble(dataTable,'DataVariables',["Vibration";"Tacho"],...
           'ConditionVariables',"faultCode")

% Confirm the data condition variable selections.
dv = wensemble.DataVariables

cv = wensemble.ConditionVariables

%%% Read Workspace Ensemble Members
% Inspect the data variables in the workspace ensemble for the first two members.
% By default, reading the ensemble returns all ensemble variables. To select a subset of variables to read, specify SelectedVariables.
wensemble.SelectedVariables = ["Vibration","Tacho"];

% Use read to get the contents of the next unread member. 
% Each time you read a member, the software marks that member as read, and the next read command returns the following member. 
% You can use a succession of read commands to loop through an ensemble. 
% To start at the first member, use reset.
reset(wensemble)
m1 = read(wensemble)

m2 = read(wensemble);

% m1 and m2 are both tables containing vibration and tacho data. 
% m1 contains the data for the first member. 
% m2 contains the data for the second member.
% Examine the vibration samples for both members. 
% Extract the vibration signals from m1 and m2 and display the first three samples of each signal.
m1vib = readMemberData(m1,'Vibration');
m2vib = readMemberData(m2,'Vibration');
head(m1vib,3)

head(m2vib,3)

% Each read command returns a unique result.

%% Manage Variables and Features in a Workspace Ensemble
% This example illustrates some of the basic commands used in code that Diagnostic Feature Designer generates. 
% The example shows how to use these commands to create a workspace ensemble from a table, perform member-by-member computations for a new feature, and create a feature table and an ensemble table from the workspace ensemble.

% Interacting with a workspace ensemble is similar to interacting with a file ensemble datastore or a simulation ensemble datastore. 
% Many of the commands are the same. 
% Unlike the ensemble datastores, which allow interaction with external files, the workspace ensemble datastore enables interaction with data in memory.

%%% Create a Workspace Ensemble from a Table
% Load the ensemble table dataTable, which contains 16 members, each of which contain timetables with vibration and tacho data along with a scalar fault code.
load dfd_Tutorial dataTable

% Create a workspace ensemble wensemble from dataTable, specifying the data variables and condition variables corresponding to the variables in dataTable.
wensemble = workspaceEnsemble(dataTable,'DataVariables',["Vibration";"Tacho"],...
           'ConditionVariables',"faultCode")

% Processing the data and extracting features requires only Vibration and Tacho. 
% Specify SelectedVariables to contain Vibration and Tacho.
wensemble.SelectedVariables = ["Vibration","Tacho"];

%%% Compute Mean of Vibration Signal for First Ensemble Member
% The mean of the vibration signal represents a scalar feature for each member. 
% Compute this feature for the first member, using an approach that scales to a loop that processes multiple members.
% Reset the ensemble and read the first member.
reset(wensemble)
m = read(wensemble)

% Extract the vibration data from the member table m.
mvibd = readMemberData(m,'Vibration');

% Compute the mean value of the vibration.
m_mean = mean(mvibd.Data)

% Append the results to m.
m = [m,table(m_mean,'VariableNames',"Data_Mean")]

%%% Add New Feature to Ensemble Variables
% To incorporate the updated member into wensemble, you must first specify the new Data_Mean feature as an ensemble variable. 
% Add Data_Mean to the set of ensemble data variables dv using dot notation.
dv = wensemble.DataVariables;
wensemble.DataVariables = [dv;"Data_Mean"];

%%% Append Updated Member Table to Workspace Ensemble
% Append the updated member table to the ensemble using the writeToLastMemberRead command.
writeToLastMemberRead(wensemble,m)

%%% Loop through Remaining Ensemble Members
% Perform the same member-specific steps for the remaining ensemble members.
while hasdata(wensemble)
    m = read(wensemble);
    mvibd = readMemberData(m,'Vibration');
    m_mean = mean(mvibd.Data);
    m = [m,table(m_mean,'VariableNames',"Data_Mean")];
    writeToLastMemberRead(wensemble,m)
end

%%% Create Feature Table and Ensemble Table from Workspace Ensemble
% Extract the feature table from wensemble with the readFeatureTable command. 
% View the first three rows.
ft = readFeatureTable(wensemble);
head(ft,3)

% The feature table contains the condition variable FaultCode and the data variable Data_Mean.
% Set the SelectedVariables property to include all variables so that the resulting ensemble table contains all your information.
wensemble.SelectedVariables = ["Vibration";"Tacho";"Data_Mean";"faultCode"]

% Use the datastore command readall to convert the workspace ensemble into an ensemble table.
tensemble = readall(wensemble)

% The table includes the original signals and the new feature.
