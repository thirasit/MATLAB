%%% Manage ensemble data generated by generateSimulationEnsemble or by logging simulation data in Simulink

%% Generate Ensemble of Fault Data
% Generate a simulation ensemble datastore of data representing a machine operating under fault conditions by simulating a Simulink® model of the machine while varying a fault parameter.

% Load the Simulink model. 
% This model is a simplified version of the gear-box model described in Using Simulink to Generate Fault Data. 
% For this example, only one fault mode is modeled, a gear-tooth fault.
mdl = 'TransmissionCasingSimplified';
open_system(mdl)

% The gear-tooth fault is modeled as a disturbance in the Gear Tooth fault subsystem. 
% The magnitude of the disturbance is controlled by the model variable ToothFaultGain, where ToothFaultGain = 0 corresponds to no gear-tooth fault (healthy operation). 
% To generate the ensemble of fault data, you use generateSimulationEnsemble to simulate the model at different values of ToothFaultGain, ranging from -2 to zero. 
% This function uses an array of Simulink.SimulationInput objects to configure the Simulink model for each member in the ensemble. 
% Each simulation generates a separate member of the ensemble in its own data file. 
% Create such an array, and use setVariable to assign a tooth-fault gain value for each run.
toothFaultValues  = -2:0.5:0; % 5 ToothFaultGain values 

for ct = numel(toothFaultValues):-1:1
    simin(ct) = Simulink.SimulationInput(mdl);
    simin(ct) = setVariable(simin(ct),'ToothFaultGain',toothFaultValues(ct));
end

% For this example, the model is already configured to log certain signal values, Vibration and Tacho (see Export Signal Data Using Signal Logging (Simulink)). generateSimulationEnsemble further configures the model to:
% - Save logged data to files in the folder you specify.
% - Use the timetable format for signal logging.
% - Store each Simulink.SimulationInput object in the saved file with the corresponding logged data.
% Specify a location for the generated data. For this example, save the data to a folder called Data within your current folder. The indicator status is 1 (true) if all the simulations complete without error.
mkdir Data
location = fullfile(pwd,'Data');
[status,E] = generateSimulationEnsemble(simin,location);

% Inside the Data folder, examine one of the files. Each file is a MAT-file containing the following MATLAB® variables:
% - SimulationInput — The Simulink.SimulationInput object that was used to configure the model for generating the data in the file. You can use this to extract information about the conditions (such as faulty or healthy) under which this simulation was run.
% - logsout — A Dataset object containing all the data that the Simulink model is configured to log.
% - PMSignalLogName — The name of the variable that contains the logged data ('logsout' in this example). The simulationEnsembleDatastore command uses this name to parse the data in the file.
% - SimulationMetadata — Other information about the simulation that generated the data logged in the file.
% Now you can create the simulation ensemble datastore using the generated data. 
% The resulting simulationEnsembleDatastore object points to the generated data. 
% The object lists the data variables in the ensemble, and by default all the variables are selected for reading. 
% Examine the DataVariables and SelectedVariables properties of the ensemble to confirm these designations.
ensemble = simulationEnsembleDatastore(location)

ensemble.DataVariables

ensemble.SelectedVariables

% You can now use ensemble to read and analyze the generated data in the ensemble datastore. See simulationEnsembleDatastore for more information.

%% Extract Subset of Stored Variables from Ensemble Member
% In general, you use the read command to extract data from a simulationEnsembleDatastore object into the MATLAB® workspace. 
% Often, your ensemble contains more variables than you need to use for a particular analysis. 
% Use the SelectedVariables property of the simulationEnsembleDatastore object to select a subset of variables for reading.

% For this example, use the following code to create a simulationEnsembleDatastore object using data previously generated by running a Simulink® model at a various fault values (See generateSimulationEnsemble.). 
% The ensemble includes simulation data for five different values of a model parameter, ToothFaultGain. 
% Because of the volume of data, the unzip operation takes a few minutes.
unzip simEnsData.zip  % extract compressed files
ensemble = simulationEnsembleDatastore(pwd,'logsout')

% The model that generated the data, TransmissionCasingSimplified, was configured such that the resulting ensemble contains variables including accelerometer data, Vibration, and tachometer data, Tacho. 
% By default, the simulationEnsembleDatastore object designates all these variables as both data variables and selected variables, as shown in the DataVariables and SelectedVariables properties.
ensemble.DataVariables

ensemble.SelectedVariables

% Suppose that for the analysis you want to do, you need only the Vibration data and the Simulink.SimulationInput object that describes the conditions under which this member data was simulated. 
% Set ensemble.SelectedVariables to specify the variables you want to read. 
% The read command then extracts those variables from the current ensemble member.
ensemble.SelectedVariables = ["Vibration";"SimulationInput"];
data1 = read(ensemble)

% data.Vibration is a cell array containing one timetable that stores the simulation times and the corresponding vibration signal. 
% You can now process this data as needed. 
% For instance, extract the vibration data from the table and plot it.
vibdata1 = data1.Vibration{1};
figure
plot(vibdata1.Time,vibdata1.Data)
title('Vibration - First Ensemble Member')

% The next time you call read on this ensemble, the last-read member designation advances to the next member of the ensemble (see Data Ensembles for Condition Monitoring and Predictive Maintenance). 
% Read the selected variables from the next member of the ensemble.
data2 = read(ensemble)

% To confirm that data1 and data2 contain data from different ensemble members, examine the values of the varied model parameter, ToothFaultGain. 
% For each ensemble, this value is stored in the Variables field of the SimulationInput variable.
data1.SimulationInput{1}.Variables

data2.SimulationInput{1}.Variables

% This result confirms that data1 is from the ensemble member with ToothFaultGain = –2, and data2 is from the member with ToothFaultGain = –1.5.

%% Append Derived Data to Ensemble Members
% You can process data in an ensemble datastore and add derived variables to the ensemble members. 
% For this example, process a variable value to compute a label that indicates whether the ensemble member contains data obtained with a fault present. 
% You then add that label to the ensemble.

% For this example, use the following code to create a simulationEnsembleDatastore object using data previously generated by running a Simulink® model at a various fault values. 
% (See generateSimulationEnsemble.) The ensemble includes simulation data for five different values of a model parameter, ToothFaultGain. 
% The model was configured to log the simulation data to a variable named logsout in the MAT-files that are stored for this example in simEnsData.zip. 
% Because of the volume of data, the unzip operation might take a minute or two.
unzip simEnsData.zip  % extract compressed files
ensemble = simulationEnsembleDatastore(pwd,'logsout')

% Read the data from the first member in the ensemble. 
% The software determines which ensemble is the first member, and updates the property ensemble.LastMemberRead to reflect the name of the corresponding file.
data = read(ensemble)

% By default, all the variables stored in the ensemble data are designated as SelectedVariables. 
% Therefore, the returned table row includes all ensemble variables, including a variable SimulationInput, which contains the Simulink.SimulationInput object that configured the simulation for this ensemble member. 
% That object includes the ToothFaultGain value used for the ensemble member, stored in a data structure in its Variables property. 
% Examine that value. 
% (For more information about how the simulation configuration is stored, see Simulink.SimulationInput (Simulink).)
data.SimulationInput{1}

Inputvars = data.SimulationInput{1}.Variables;
Inputvars.Name

Inputvars.Value

% Suppose that you want to convert the ToothFaultGain values for each ensemble member into a binary indicator of whether or not a tooth fault is present. 
% Suppose further that you know from your experience with the system that tooth-fault gain values less than 0.1 in magnitude are small enough to be considered healthy operation. 
% Convert the gain value for this ensemble into an indicator that is 0 (no fault) for –0.1 < gain < 0.1, and 1 (fault) otherwise.
sT = abs(Inputvars.Value) < 0.1;

% To append the new tooth-fault indicator to the corresponding ensemble data, first expand the list of data variables in the ensemble to include a variable for the indicator.
ensemble.DataVariables = [ensemble.DataVariables; "ToothFault"];
ensemble.DataVariables

% This operation is conceptually equivalent to adding a column to the table of ensemble data. 
% Now that DataVariables contains the new variable name, assign the derived value to that column of the member using writeToLastMemberRead.
writeToLastMemberRead(ensemble,'ToothFault',sT);

% In practice, you want to append the tooth-fault indicator to every member in the ensemble. 
% To do so, reset the ensemble datastore to its unread state, so that the next read operation starts at the first ensemble member. 
% Then, loop through all the ensemble members, computing ToothFault for each member and appending it. 
% The reset operation does not change ensemble.DataVariables, so "ToothFault" is still present in that list.
reset(ensemble);

sT = false; 
while hasdata(ensemble)
    data = read(ensemble);
    InputVars = data.SimulationInput{1}.Variables;
    TFGain = InputVars.Value;
    sT = abs(TFGain) < 0.1;
    writeToLastMemberRead(ensemble,'ToothFault',sT);
end

% Finally, designate the new tooth-fault indicator as a condition variable in the ensemble datastore. 
% You can use this designation to track and refer to variables in the ensemble data that represent conditions under which the member data was generated.
ensemble.ConditionVariables = {"ToothFault"};
ensemble.ConditionVariables

% You can add the new variable to ensemble.SelectedVariables when you want to read it out for further analysis. 
% For an example that shows more ways to manipulate and analyze data stored in a simulationEnsembleDatastore object, see Using Simulink to Generate Fault Data.

%% Read Multiple Ensemble Members in One Operation
% To read data from multiple ensemble members in one call to the read command, use the ReadSize property of an ensemble datastore. 
% This example uses simulationEnsembleDatastore, but you can use the same technique for fileEnsembleDatastore.

% Use the following code to create a simulationEnsembleDatastore object using data previously generated by running a Simulink model at a various fault values (see generateSimulationEnsemble). 
% The ensemble includes simulation data for five different values of a model parameter, ToothFaultGain. 
% (Because of the volume of data, the unzip operation might take a minute or two.) 
% Specify some of the data variables to read.
unzip simEnsData.zip  % extract compressed files
ensemble = simulationEnsembleDatastore(pwd,'logsout');
ensemble.SelectedVariables = ["Vibration";"SimulationInput"];

% By default, calling read on this ensemble datastore returns a single-row table containing the values of the Vibration and SimulationInput variables for the first ensemble member. 
% Change the ReadSize property to read three members at once.
ensemble.ReadSize = 3;
data1 = read(ensemble)

% read returns a three-row table, where each row contains data from one of the first, second, and third ensemble members. 
% read also updates the LastReadMember property of the ensemble datastore to a string array containing the paths of the three corresponding files. 
% Avoid setting ReadSize to a value so large as to risk running out of memory while loading the data.

% If the ensemble contains three or more additional members, the next read operation returns data from the fourth, fifth, and sixth members. 
% Because the ensemble of this example contains only five members total, the next read operation returns only two rows.
data2 = read(ensemble)
